name: Orbit Homework

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  bicep-plan:
    name: 'Bicep Plan'
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Azure Subscription
      uses: azure/cli@v2
      with:
        azcliversion: latest
        inlineScript: |
          az account show

    - name: Bicep Plan
      uses: azure/cli@v2
      with:
        azcliversion: latest
        inlineScript: |
          export DOTNET_SYSTEM_GLOBALIZATION_INVARIANT=1
          az bicep install
          az bicep version
          az deployment sub create --location "East US 2" --template-file "/home/runner/work/orbit-homework/orbit-homework/infra/bicep/main.bicep" --what-if
  
  bicep-deployment:
    name: 'Bicep Deployment'
    runs-on: ubuntu-latest
    needs: bicep-plan
    environment: 'orbit-homework'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Azure Subscription
      uses: azure/cli@v2
      with:
        azcliversion: latest
        inlineScript: |
          az account show

    - name: Bicep Deloyment
      uses: azure/cli@v2
      with:
        azcliversion: latest
        inlineScript: |
          export DOTNET_SYSTEM_GLOBALIZATION_INVARIANT=1
          az bicep install
          az bicep version
          az deployment sub create --location "East US 2" --template-file "/home/runner/work/orbit-homework/orbit-homework/infra/bicep/main.bicep"

  terraform-plan:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest
    needs: [bicep-plan, bicep-deployment]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: 'Terraform Install'
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.9.0"

    - name: Terraform Version
      run: terraform version

    - name: Terraform Init
      run: |
        cd infra/terraform
        export ARM_CLIENT_ID=${{ secrets.ARM_CLIENT_ID }}
        export ARM_CLIENT_SECRET=${{ secrets.ARM_CLIENT_SECRET }}
        export ARM_TENANT_ID=${{ secrets.ARM_TENANT_ID }}
        export ARM_SUBSCRIPTION_ID=${{ secrets.ARM_SUBSCRIPTION_ID }}
        terraform init \
        -upgrade \
        -backend-config="resource_group_name=rg-orbittfstate-tst-use2-001" \
        -backend-config="storage_account_name=storbittfstate001" \
        -backend-config="container_name=orbit-tfstate" \
        -backend-config="key=orbit.tfstate"

    - name: Terraform Plan
      run: |
        cd infra/terraform
        export ARM_CLIENT_ID=${{ secrets.ARM_CLIENT_ID }}
        export ARM_CLIENT_SECRET=${{ secrets.ARM_CLIENT_SECRET }}
        export ARM_TENANT_ID=${{ secrets.ARM_TENANT_ID }}
        export ARM_SUBSCRIPTION_ID=${{ secrets.ARM_SUBSCRIPTION_ID }}
        terraform plan -out=tfplan
        
    - name: Save Terraform Plan
      uses: actions/upload-artifact@v4
      with:
        name: tfplan
        path: |
          infra/terraform/tfplan

  terraform-apply:
    name: 'Terraform Apply'
    runs-on: ubuntu-latest
    needs: terraform-plan
    environment: 'orbit-homework'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: 'Terraform Install'
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.9.0"

    - name: Terraform Version
      run: terraform version

    - name: Terraform Init
      run: |
        cd infra/terraform
        export ARM_CLIENT_ID=${{ secrets.ARM_CLIENT_ID }}
        export ARM_CLIENT_SECRET=${{ secrets.ARM_CLIENT_SECRET }}
        export ARM_TENANT_ID=${{ secrets.ARM_TENANT_ID }}
        export ARM_SUBSCRIPTION_ID=${{ secrets.ARM_SUBSCRIPTION_ID }}
        terraform init \
        -upgrade \
        -backend-config="resource_group_name=rg-orbittfstate-tst-use2-001" \
        -backend-config="storage_account_name=storbittfstate001" \
        -backend-config="container_name=orbit-tfstate" \
        -backend-config="key=orbit.tfstate"

    - name: Download Terraform Plan
      uses: actions/download-artifact@v4
      with:
        name: tfplan
        path: infra/terraform

    - name: Terraform Apply
      run: |
        cd infra/terraform
        export ARM_CLIENT_ID=${{ secrets.ARM_CLIENT_ID }}
        export ARM_CLIENT_SECRET=${{ secrets.ARM_CLIENT_SECRET }}
        export ARM_TENANT_ID=${{ secrets.ARM_TENANT_ID }}
        export ARM_SUBSCRIPTION_ID=${{ secrets.ARM_SUBSCRIPTION_ID }}
        terraform apply -auto-approve tfplan

  kubernetes-configuration:
    name: 'Kubernetes Configuration'
    runs-on: ubuntu-latest
    needs: terraform-apply

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: 'Terraform Install'
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.9.0"

    - name: Terraform Init
      run: |
        cd infra/terraform
        export ARM_CLIENT_ID=${{ secrets.ARM_CLIENT_ID }}
        export ARM_CLIENT_SECRET=${{ secrets.ARM_CLIENT_SECRET }}
        export ARM_TENANT_ID=${{ secrets.ARM_TENANT_ID }}
        export ARM_SUBSCRIPTION_ID=${{ secrets.ARM_SUBSCRIPTION_ID }}
        terraform init \
        -upgrade \
        -backend-config="resource_group_name=rg-orbittfstate-tst-use2-001" \
        -backend-config="storage_account_name=storbittfstate001" \
        -backend-config="container_name=orbit-tfstate" \
        -backend-config="key=orbit.tfstate"

    - name: Kubernetes Save Configuration
      run: |
        echo "$(terraform output kube_config)" > ./azurek8s
        export KUBECONFIG=./azurek8s
    
    - name: List working directory and content
      run: |
        pwd
        ls

    - name: Kubernetes Get Nodes
      run: |
        kubectl get nodes
    
    - name: Docker Compose files
      run: docker compose -f docker-compose-quickstart.yml up -d
    
    - name: Docker List Images
      run: docker images

    - name: Azure Container Registry Log In
      uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.ACR_REGISTRY }}
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}
      
    - name: Azure Container Registry Push Image
      run: |
        docker tag orbit-homework-store-front:latest ${{ secrets.ACR_REGISTRY }}/orbit-homework-store-front:latest
        docker push ${{ secrets.ACR_REGISTRY }}/orbit-homework-store-front:latest
        docker tag orbit-homework-product-service:latest ${{ secrets.ACR_REGISTRY }}/orbit-homework-product-service:latest
        docker push ${{ secrets.ACR_REGISTRY }}/orbit-homework-product-service:latest
        docker tag orbit-homework-order-service:latest ${{ secrets.ACR_REGISTRY }}/orbit-homework-order-service:latest
        docker push ${{ secrets.ACR_REGISTRY }}/orbit-homework-order-service:latest
  
  application-deployment:
    name: 'Application Deployment'
    runs-on: ubuntu-latest
    needs: kubernetes-configuration

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: 'Terraform Install'
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.9.0"

    - name: Terraform Init
      run: |
        cd infra/terraform
        export ARM_CLIENT_ID=${{ secrets.ARM_CLIENT_ID }}
        export ARM_CLIENT_SECRET=${{ secrets.ARM_CLIENT_SECRET }}
        export ARM_TENANT_ID=${{ secrets.ARM_TENANT_ID }}
        export ARM_SUBSCRIPTION_ID=${{ secrets.ARM_SUBSCRIPTION_ID }}
        terraform init \
        -upgrade \
        -backend-config="resource_group_name=rg-orbittfstate-tst-use2-001" \
        -backend-config="storage_account_name=storbittfstate001" \
        -backend-config="container_name=orbit-tfstate" \
        -backend-config="key=orbit.tfstate"

    - name: Kubernetes Save Configuration
      run: |
        echo "$(terraform output kube_config)" > ./azurek8s
        export KUBECONFIG=./azurek8s
    
    - name: List working directory and content
      run: |
        pwd
        ls
    
    - name: Tag and Push Docker Image
      run: |
        kubectl apply -f aks-store-quickstart.yaml "..\..\aks-store-quickstart.yaml"